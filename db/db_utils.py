import pandas as pd
from db.connection import get_engine
from sqlalchemy import text

def get_all_weather_by_city(city_name: str,limit=20):
    engine = get_engine()
    query = f"""
        SELECT c.city_name, f.temperature, f.feels_like, 
               f.humidity, f.wind_speed, f.weather_desc, f.dt
        FROM fact_weather f
        JOIN dim_city c ON f.city_id = c.city_id
        WHERE LOWER(c.city_name) = LOWER('{city_name}')
        ORDER BY f.dt ASC;
    """
    return pd.read_sql(query, engine)

def get_weather_by_city(city_name: str, limit=20):
    engine = get_engine()
    query = f"""
        SELECT c.city_name, f.temperature, f.feels_like, 
               f.humidity, f.wind_speed, f.weather_desc, f.dt
        FROM fact_weather f
        JOIN dim_city c ON f.city_id = c.city_id
        WHERE LOWER(c.city_name) = LOWER('{city_name}')
        ORDER BY f.dt ASC
    """
    return pd.read_sql(query, engine)

def get_all_city():
    engine = get_engine()
    query = f"""
        SELECT city_name
        FROM dim_city
        ORDER BY city_name ASC;
    """
    return pd.read_sql(query, engine)

def get_forecast_by_city(city_name: str):
    engine = get_engine()
    query = text("""
        SELECT c.city_name, f.temperature, f.feels_like,
               f.humidity, f.wind_speed, f.weather_desc, f.dt
        FROM fact_weather_forecast_hourly f
        JOIN dim_city c ON f.city_id = c.city_id
        WHERE LOWER(c.city_name) = LOWER(:city_name)
          AND (f.dt AT TIME ZONE 'UTC' AT TIME ZONE 'Asia/Ho_Chi_Minh')::date = CURRENT_DATE + INTERVAL '1 day'
        ORDER BY f.dt ASC
    """)
    return pd.read_sql(query, engine, params={"city_name": city_name})

def get_forecast_today_by_city(city_name: str):
    engine = get_engine()
    query = text("""
        SELECT c.city_name, f.temperature, f.feels_like,
               f.humidity, f.wind_speed, f.weather_desc, f.dt
        FROM fact_weather_forecast_hourly f
        JOIN dim_city c ON f.city_id = c.city_id
        WHERE LOWER(c.city_name) = LOWER(:city_name)
          AND (f.dt AT TIME ZONE 'UTC' AT TIME ZONE 'Asia/Ho_Chi_Minh')::date = CURRENT_DATE
        ORDER BY f.dt ASC
    """)
    return pd.read_sql(query, engine, params={"city_name": city_name})

def export_to_csv():
    engine = get_engine()
    tables = ["fact_weather", "dim_city", "raw_weather", "fact_weather_forecast_hourly"]

    for t in tables:
        df = pd.read_sql(f"SELECT * FROM {t}", engine)

        for col in df.columns:
            col_lower = col.lower()

            # 1Ô∏è‚É£ Chu·∫©n h√≥a c√°c c·ªôt id / city_id v·ªÅ int
            if "id" in col_lower:
                df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

            # 2Ô∏è‚É£ Chu·∫©n h√≥a c·ªôt th·ªùi gian dt
            elif "dt" in col_lower:
                df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)

                def normalize_timestamp(x):
                    # N·∫øu nh·ªè h∆°n 10^11 (v√≠ d·ª• 1759626000) ‚Üí ƒë√£ ƒë√∫ng (t√≠nh theo gi√¢y)
                    if x < 1e11:
                        return int(x)
                    # N·∫øu c√≥ 13 ch·ªØ s·ªë (mili gi√¢y) ‚Üí chia 1000
                    elif x < 1e15:
                        return int(x / 1000)
                    # N·∫øu c√≥ 16‚Äì19 ch·ªØ s·ªë (micro/nano gi√¢y) ‚Üí chia 1_000_000_000
                    else:
                        return int(x / 1_000_000_000)

                df[col] = df[col].apply(normalize_timestamp)

        # Xu·∫•t ra CSV
        df.to_csv(f"{t}.csv", index=False, encoding="utf-8-sig")

        print(f"‚úÖ ƒê√£ export b·∫£ng {t} (ƒë√£ chu·∫©n h√≥a ki·ªÉu d·ªØ li·ªáu).")

    print("üéâ ƒê√£ xu·∫•t to√†n b·ªô b·∫£ng ra CSV th√†nh c√¥ng, an to√†n ƒë·ªÉ import v√†o Supabase.")
if __name__ == "__main__":
    export_to_csv()